import boto3
import json

# Setup DynamoDB
region = 'us-east-1'
table_name = 'text_file_table'

dynamodb = boto3.resource('dynamodb', region_name=region)
table = dynamodb.Table(table_name)

def get_file_content(file_key):
    """Fetch file content from DynamoDB."""
    response = table.get_item(Key={'PK': file_key})
    if 'Item' not in response:
        raise ValueError(f"No file found for key: {file_key}")
    
    file_contents = response['Item']['file_contents']
    
    try:
        # Try to parse JSON content
        data = json.loads(file_contents)
    except json.JSONDecodeError:
        raise ValueError("File content is not valid JSON.")
    
    return data

def process_request(file_key, input_reg_typ, input_a_dbt):
    """Main logic: fetch file, filter rows, and find the lowest rank."""
    rows = get_file_content(file_key)  # This should be a list of dicts

    # 1. Filter rows where reg_typ matches 'REG' or 'EX'
    reg_typ_filtered = [row for row in rows if row.get('reg_typ') in ['REG', 'EX']]

    if not reg_typ_filtered:
        raise ValueError("No rows matching REG or EX found.")

    # 2. Further filter rows where A_DBT lies between low_be and hi_be
    amount_filtered = [
        row for row in reg_typ_filtered
        if row.get('low_be') is not None and row.get('hi_be') is not None and
           float(row['low_be']) <= input_a_dbt <= float(row['hi_be'])
    ]

    if not amount_filtered:
        raise ValueError("No rows matching A_DBT range found.")

    # 3. Select the row with the lowest rank
    selected_row = min(amount_filtered, key=lambda x: float(x['rank']))

    return selected_row  # You can customize which fields to return here

# Example usage
if __name__ == "__main__":
    # Example input request
    input_request = {
        "file_key": "FGSM_5411",
        "reg_typ": "REG",
        "A_DBT": 45.75
    }

    try:
        output = process_request(
            file_key=input_request['file_key'],
            input_reg_typ=input_request['reg_typ'],
            input_a_dbt=input_request['A_DBT']
        )
        print("Selected Row:", output)
    except ValueError as e:
        print(str(e))
