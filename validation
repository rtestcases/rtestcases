@field_validator("routing_type")
    def validate_routing_type(cls, v, info):
        v_upper = v.upper()
        allowed_values = ["PIN", "PINLESS"]
        if v_upper not in allowed_values:
            raise HTTPException(
                status_code=400, detail=f"Invalid value for routing_type: {v}. Must be 'PIN' or 'PINLESS'"
            )
        
        # Get the entry_type value from the model data
        entry_type = info.data.get('entry_type') if info.data else None
        
        # If routing_type is PINLESS, entry_type must be provided
        if v_upper == 'PINLESS' and entry_type is None:
            raise HTTPException(
                status_code=400, detail="entry_type is required when routing_type is 'PINLESS'"
            )
        
        # If routing_type is PIN, entry_type should not be provided
        if v_upper == 'PIN' and entry_type is not None:
            raise HTTPException(
                status_code=400, detail="entry_type should not be provided when routing_type is not 'PINLESS'"
            )
        
        return v_upper
